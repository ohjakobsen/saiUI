% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/inputs.R
\name{actionButton}
\alias{actionButton}
\title{Create an action button}
\usage{
actionButton(
  inputId,
  label,
  color = "primary",
  outline = FALSE,
  icon = NULL,
  class = NULL,
  width = NULL,
  size = c("normal", "sm", "lg"),
  ...
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{The contents of the button or link--usually a text label, but
you could also use any other HTML, like an image.}

\item{color}{The color of the button. Must be a valid Bootstrap 4 color.}

\item{outline}{If \code{TRUE}, background color will be removed from the button.
Defaults to \code{FALSE}.}

\item{icon}{An optional \code{\link[=createIcon]{icon}} to appear next to the label}

\item{class}{Additional CSS classes to add to the button}

\item{width}{The width of the input, e.g. \code{'400px'}, or \code{'100\%'};
see \code{\link[shiny:validateCssUnit]{validateCssUnit()}}.}

\item{size}{The size of the button. Use \code{sm} for small and \code{lg} for
large buttons.}

\item{...}{Named attributes to be applied to the button or link.}
}
\description{
Creates an action button or link whose value is initially zero, and increments by one
each time it is pressed.
}
\section{Server value}{


An integer of class \code{"shinyActionButtonValue"}. This class differs from
ordinary integers in that a value of 0 is considered "falsy".
This implies two things:
\itemize{
\item Event handlers (e.g., \code{\link[shiny:observeEvent]{observeEvent()}}, \code{\link[shiny:eventReactive]{eventReactive()}}) won't execute on initial load.
\item Input validation (e.g., \code{\link[shiny:req]{req()}}, \code{\link[shiny:need]{need()}}) will fail on initial load.
}

}

\examples{
## Only run examples in interactive R sessions
if (interactive()) {

ui <- fluidPage(
  sliderInput("obs", "Number of observations", 0, 1000, 500),
  actionButton("goButton", "Go!"),
  plotOutput("distPlot")
)

server <- function(input, output) {
  output$distPlot <- renderPlot({
    # Take a dependency on input$goButton. This will run once initially,
    # because the value changes from NULL to 0.
    input$goButton

    # Use isolate() to avoid dependency on input$obs
    dist <- isolate(rnorm(input$obs))
    hist(dist)
  })
}

shinyApp(ui, server)

}
}
\seealso{
\code{\link[shiny:observeEvent]{observeEvent()}} and \code{\link[shiny:eventReactive]{eventReactive()}}

Other input elements: \code{\link[shiny]{checkboxGroupInput}},
  \code{\link[shiny]{checkboxInput}}, \code{\link[shiny]{dateInput}},
  \code{\link[shiny]{dateRangeInput}}, \code{\link[shiny]{fileInput}},
  \code{\link[shiny]{numericInput}}, \code{\link[shiny]{passwordInput}},
  \code{\link[shiny]{radioButtons}}, \code{\link[shiny]{selectInput}},
  \code{\link[shiny]{sliderInput}}, \code{\link[shiny]{submitButton}},
  \code{\link[shiny]{textAreaInput}}, \code{\link[shiny]{textInput}},
  \code{\link[shiny]{varSelectInput}}
}
